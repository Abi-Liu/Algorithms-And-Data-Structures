const solution = require("./solution");

describe("Test for isValidSudoku", () => {
  test("for valid board", () => {
    const board = [
      ["5", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];
    expect(solution(board)).toBe(true);
  });

  test("for invalid column and subgrid", () => {
    const board = [
      ["8", "3", ".", ".", "7", ".", ".", ".", "."],
      ["6", ".", ".", "1", "9", "5", ".", ".", "."],
      [".", "9", "8", ".", ".", ".", ".", "6", "."],
      ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
      ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
      ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
      [".", "6", ".", ".", ".", ".", "2", "8", "."],
      [".", ".", ".", "4", "1", "9", ".", ".", "5"],
      [".", ".", ".", ".", "8", ".", ".", "7", "9"],
    ];
    expect(solution(board)).toBe(false);
  });

  test("for invalid first subgrid", () => {
    const board = [
      [".", "4", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", "4", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", "1", ".", ".", "7", ".", "."],
      [".", ".", ".", ".", ".", ".", ".", ".", "."],
      [".", ".", ".", "3", ".", ".", ".", "6", "."],
      [".", ".", ".", ".", ".", "6", ".", "9", "."],
      [".", ".", ".", ".", "1", ".", ".", ".", "."],
      [".", ".", ".", ".", ".", ".", "2", ".", "."],
      [".", ".", ".", "8", ".", ".", ".", ".", "."],
    ];
    expect(solution(board)).toBe(false);
  });
});
